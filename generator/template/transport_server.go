package template

import (
	"context"

	. "github.com/dave/jennifer/jen"
	mstrings "github.com/valerylobachev/microgen/generator/strings"
	"github.com/valerylobachev/microgen/generator/write_strategy"
	"github.com/vetcher/go-astra/types"
)

type endpointsServerTemplate struct {
	info *GenerationInfo
}

func NewEndpointsServerTemplate(info *GenerationInfo) Template {
	return &endpointsServerTemplate{
		info: info,
	}
}

// Renders endpoints file.
//
//	// This file was automatically generated by "microgen" utility.
//	// DO NOT EDIT.
//	package stringsvc
//
//	import (
//		context "context"
//		endpoint "github.com/go-kit/kit/endpoint"
//	)
//
//	func CountEndpoint(svc StringService) endpoint.Endpoint {
//		return func(ctx context.Context, request interface{}) (interface{}, error) {
//			req := request.(*CountRequest)
//			count, positions := svc.Count(ctx, req.Text, req.Symbol)
//			return &CountResponse{
//				Count:     count,
//				Positions: positions,
//			}, nil
//		}
//	}
func (t *endpointsServerTemplate) Render(ctx context.Context) write_strategy.Renderer {
	f := NewFile("transport")
	f.HeaderComment(t.info.FileHeader)

	f.Add(t.allEndpoints()).Line()
	if Tags(ctx).HasAny(TracingMiddlewareTag) {
		f.Comment("TraceServerEndpoints is used for tracing endpoints on server side.")
		f.Add(t.serverTracingMiddleware()).Line()
	}
	for _, signature := range t.info.Iface.Methods {
		if t.info.AllowedMethods[signature.Name] {
			f.Add(createEndpoint(signature, t.info)).Line().Line()
		}
	}
	return f
}

func (endpointsServerTemplate) DefaultPath() string {
	return filenameBuilder(PathTransport, "server")
}

func (t *endpointsServerTemplate) Prepare(ctx context.Context) error {
	return nil
}

func (t *endpointsServerTemplate) ChooseStrategy(ctx context.Context) (write_strategy.Strategy, error) {
	return write_strategy.NewCreateFileStrategy(t.info.OutputFilePath, t.DefaultPath()), nil
}

// Render new Endpoint body.
//
//	return func(ctx context.Context, request interface{}) (interface{}, error) {
//		req := request.(*CountRequest)
//		count, positions := svc.Count(ctx, req.Text, req.Symbol)
//		return &CountResponse{
//			Count:     count,
//			Positions: positions,
//		}, nil
//	}
func createEndpointBody(signature *normalizedFunction) *Statement {
	return Return(Func().Params(
		Id(firstArgName(&signature.Function)).Qual("context", "Context"),
		Id("request").Interface(),
	).Params(
		Interface(),
		Error(),
	).BlockFunc(func(g *Group) {
		methodParams := RemoveContextIfFirst(signature.parent.Args)
		if len(methodParams) > 0 {
			g.Id("req").Op(":=").Id("request").Assert(Op("*").Id(requestStructName(signature.parent)))
		}

		g.Add(paramNames(signature.Results).
			Op(":=").
			Id("svc").
			Dot(signature.Name).
			CallFunc(func(g *Group) {
				g.Add(Id(firstArgName(&signature.Function)))
				for _, field := range methodParams {
					v := Dot(mstrings.ToUpperFirst(field.Name))
					if types.IsEllipsis(field.Type) {
						v.Op("...")
					}
					g.Add(Id("req").Add(v))
				}
			}))

		g.Return(
			Op("&").Id(responseStructName(signature.parent)).Values(dictByNormalVariables(
				removeErrorIfLast(signature.parent.Results),
				removeErrorIfLast(signature.Results),
			)),
			Id(nameOfLastResultError(&signature.Function)),
		)
	}))
}

// Render full new Endpoint function.
//
//	func CountEndpoint(svc StringService) endpoint.Endpoint {
//		return func(ctx context.Context, request interface{}) (interface{}, error) {
//			req := request.(*CountRequest)
//			count, positions := svc.Count(ctx, req.Text, req.Symbol)
//			return &CountResponse{
//				Count:     count,
//				Positions: positions,
//			}, nil
//		}
//	}
func createEndpoint(signature *types.Function, info *GenerationInfo) *Statement {
	normal := normalizeFunction(signature)
	return Func().
		Id(endpointsStructFieldName(signature.Name)).Params(Id("svc").Qual(info.SourcePackageImport, info.Iface.Name)).Params(Qual(PackagePathGoKitEndpoint, "Endpoint")).
		Block(createEndpointBody(normal))
}

func (t *endpointsServerTemplate) allEndpoints() *Statement {
	s := &Statement{}
	s.Func().Id("Endpoints").Call(Id("svc").Qual(t.info.SourcePackageImport, t.info.Iface.Name)).Id(EndpointsSetName).BlockFunc(func(g *Group) {
		g.Return(Id(EndpointsSetName).Values(DictFunc(func(d Dict) {
			for _, signature := range t.info.Iface.Methods {
				if t.info.AllowedMethods[signature.Name] {
					d[Id(endpointsStructFieldName(signature.Name))] = Id(endpointsStructFieldName(signature.Name)).Params(Id("svc"))
				}
			}
		})))
	})
	return s
}

func (t *endpointsServerTemplate) serverTracingMiddleware() *Statement {
	s := &Statement{}
	s.Func().Id("TraceServerEndpoints").Call(Id("endpoints").Id(EndpointsSetName), Id("tracer").Qual(PackagePathOpenTracingGo, "Tracer")).Id(EndpointsSetName).BlockFunc(func(g *Group) {
		g.Return(Id(EndpointsSetName).Values(DictFunc(func(d Dict) {
			for _, signature := range t.info.Iface.Methods {
				if t.info.AllowedMethods[signature.Name] {
					d[Id(endpointsStructFieldName(signature.Name))] = Qual(PackagePathGoKitTracing, "TraceServer").Call(Id("tracer"), Lit(signature.Name)).Call(Id("endpoints").Dot(endpointsStructFieldName(signature.Name)))
				}
			}
		})))
	})
	return s
}
