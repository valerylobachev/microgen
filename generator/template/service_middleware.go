package template

import (
	"context"

	. "github.com/dave/jennifer/jen"
	"github.com/valerylobachev/microgen/generator/write_strategy"
)

const (
	MiddlewareTypeName = "Middleware"
)

type middlewareTemplate struct {
	info *GenerationInfo
}

func NewMiddlewareTemplate(info *GenerationInfo) Template {
	return &middlewareTemplate{
		info: info,
	}
}

// Render middleware decorator
//
//	// This file was automatically generated by "microgen" utility.
//	// DO NOT EDIT.
//	package middleware
//
//	import svc "github.com/valerylobachev/microgen/examples/svc"
//
//	type Middleware func(svc.StringService) svc.StringService
func (t *middlewareTemplate) Render(ctx context.Context) write_strategy.Renderer {
	f := NewFile("service")
	f.ImportAlias(t.info.SourcePackageImport, serviceAlias)
	f.HeaderComment(t.info.FileHeader)
	f.Comment("Service middleware (closure).").
		Line().Type().Id(MiddlewareTypeName).Func().Call(Qual(t.info.SourcePackageImport, t.info.Iface.Name)).Qual(t.info.SourcePackageImport, t.info.Iface.Name)
	return f
}

func (middlewareTemplate) DefaultPath() string {
	return filenameBuilder(PathService, "middleware")
}

func (middlewareTemplate) Prepare(ctx context.Context) error {
	return nil
}

func (t *middlewareTemplate) ChooseStrategy(ctx context.Context) (write_strategy.Strategy, error) {
	return write_strategy.NewCreateFileStrategy(t.info.OutputFilePath, t.DefaultPath()), nil
}
