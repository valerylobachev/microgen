package template

import (
	"context"
	"fmt"

	. "github.com/dave/jennifer/jen"
	"github.com/valerylobachev/microgen/generator/strings"
	"github.com/valerylobachev/microgen/generator/write_strategy"
	"github.com/vetcher/go-astra/types"
)

type httpClientTemplate struct {
	info *GenerationInfo
}

func NewHttpClientTemplate(info *GenerationInfo) Template {
	return &httpClientTemplate{
		info: info,
	}
}

func (t *httpClientTemplate) DefaultPath() string {
	return filenameBuilder(PathTransport, "http", "client")
}

func (t *httpClientTemplate) ChooseStrategy(ctx context.Context) (write_strategy.Strategy, error) {
	return write_strategy.NewCreateFileStrategy(t.info.OutputFilePath, t.DefaultPath()), nil
}

func (t *httpClientTemplate) Prepare(ctx context.Context) error {
	return nil
}

// Render http client.
//
//	// This file was automatically generated by "microgen" utility.
//	// DO NOT EDIT.
//	package transporthttp
//
//	import (
//		svc "github.com/valerylobachev/microgen/examples/svc"
//		http1 "github.com/valerylobachev/microgen/examples/svc/transport/converter/http"
//		http "github.com/go-kit/kit/transport/http"
//		url "net/url"
//		strings "strings"
//	)
//
//	func NewHTTPClient(addr string, opts ...http.ClientOption) (svc.StringService, error) {
//		if !strings.HasPrefix(addr, "http") {
//			addr = "http://" + addr
//		}
//		u, err := url.Parse(addr)
//		if err != nil {
//			return nil, err
//		}
//		return &svc.Endpoints{
//			EmptyReqEndpoint: http.NewClient(
//				"POST",
//				u,
//				http1.EncodeHTTPEmptyReqRequest,
//				http1.DecodeHTTPEmptyReqResponse,
//				opts...,
//			).Endpoint(),
//			EmptyRespEndpoint: http.NewClient(
//				"POST",
//				u,
//				http1.EncodeHTTPEmptyRespRequest,
//				http1.DecodeHTTPEmptyRespResponse,
//				opts...,
//			).Endpoint(),
//			TestCaseEndpoint: http.NewClient(
//				"POST",
//				u,
//				http1.EncodeHTTPTestCaseRequest,
//				http1.DecodeHTTPTestCaseResponse,
//				opts...,
//			).Endpoint(),
//		}, nil
//	}
func (t *httpClientTemplate) Render(ctx context.Context) write_strategy.Renderer {
	src := NewFile("transporthttp")
	src.ImportAlias(t.info.SourcePackageImport, serviceAlias)
	src.ImportAlias(PackagePathGoKitTransportHTTP, "httpkit")
	src.HeaderComment(t.info.FileHeader)

	src.Func().Id("NewHTTPClient").ParamsFunc(func(p *Group) {
		p.Id("u").Op("*").Qual(PackagePathUrl, "URL")
		p.Id("opts").Op("...").Qual(PackagePathGoKitTransportHTTP, "ClientOption")
	}).Params(
		Qual(t.info.OutputPackageImport+"/transport", EndpointsSetName),
	).Block(
		t.clientBody(ctx),
	)

	if Tags(ctx).Has(TracingMiddlewareTag) {
		src.Line().Func().Id("TracingHTTPClientOptions").Params(
			Id("tracer").Qual(PackagePathOpenTracingGo, "Tracer"),
			Id("logger").Qual(PackagePathGoKitLog, "Logger"),
		).Params(
			Func().Params(Op("[]").Qual(PackagePathGoKitTransportHTTP, "ClientOption")).Params(Op("[]").Qual(PackagePathGoKitTransportHTTP, "ClientOption")),
		).Block(
			Return().Func().Params(Id("opts").Op("[]").Qual(PackagePathGoKitTransportHTTP, "ClientOption")).Params(Op("[]").Qual(PackagePathGoKitTransportHTTP, "ClientOption")).Block(
				Return().Append(Id("opts"), Qual(PackagePathGoKitTransportHTTP, "ClientBefore").Call(
					Line().Qual(PackagePathGoKitTracing, "ContextToHTTP").Call(Id("tracer"), Id("logger")).Op(",").Line(),
				)),
			),
		)
	}
	if Tags(ctx).Has(ServiceDiscoveryTag) {
		src.Comment(fmt.Sprintf("NewHTTPClientSD is a http client for %s and uses service discovery inside.", t.info.Iface.Name)).
			Line().Var().Id("NewHTTPClientSD").Op("=").Id("sdClientFactory").Call(Id("httpClientFactoryMaker"))
		src.Comment("sdClientFactory is a factory to create constructors for HTTPClientSD").
			Line().Func().Id("sdClientFactory").Params(
			Line().Id("maker").Func().Add(factoryMakerSignature(t.info)),
			Line(),
		).Params(
			Line().Func().Add(sdClientSignature(t.info, false)),
			Line(),
		).Block(
			Return().Func().Add(sdClientSignature(t.info, true)).BlockFunc(func(g *Group) {
				g.Var().Id("endpoints").Qual(t.info.OutputPackageImport+"/transport", EndpointsSetName)
				for _, fn := range t.info.Iface.Methods {
					if !t.info.AllowedMethods[fn.Name] {
						continue
					}
					g.Block(
						Id("endpointer").Op(":=").Qual(PackagePathGoKitSD, "NewEndpointer").Call(
							Id("instancer"),
							Id(serviceDiscoveryFactoryName(fn.Name)).Call(Id("maker").Call(Id("opts").Op("..."))),
							Id(_logger_)),
						List(Id("endpoints").Dot(endpointsStructFieldName(fn.Name)), Id("_")).
							Op("=").
							Qual(PackagePathGoKitLB, "NewRoundRobin").Call(Id("endpointer")).Dot("Endpoint").Call(),
					)
				}
				g.Return(Id("endpoints"))
			}),
		)
		src.Comment("httpClientFactoryMaker returns function, that describes what to do with `instance string` to create new instance of client.").
			Line().Comment("Commonly, for http protocol it would be some sort of url, e.g. `host:port`.").
			Line().Func().Id("httpClientFactoryMaker").Add(factoryMakerSignature(t.info)).Block(
			Return().Func().Params(Id("instance").String()).Params(Qual(t.info.OutputPackageImport+"/transport", EndpointsSetName), Error()).Block(
				List(Id("u"), Err()).Op(":=").Qual(PackagePathUrl, "Parse").Call(Id("instance")),
				If(Err().Op("!=").Nil()).Block(
					Return(Qual(t.info.OutputPackageImport+"/transport", EndpointsSetName).Values(), Err()),
				),
				Return(Id("NewHTTPClient").Call(Id("u"), Id("opts").Op("...")), Nil()),
			),
		)
		for _, signature := range t.info.Iface.Methods {
			if !t.info.AllowedMethods[signature.Name] {
				continue
			}
			src.Add(t.serviceDiscoveryFactory(ctx, signature))
		}
	}
	return src
}

// Render client body.
//
//	return &svc.Endpoints{
//		EmptyReqEndpoint: http.NewClient(
//			"POST",
//			u,
//			http1.EncodeHTTPEmptyReqRequest,
//			http1.DecodeHTTPEmptyReqResponse,
//			opts...,
//		).Endpoint(),
//		EmptyRespEndpoint: http.NewClient(
//			"POST",
//			u,
//			http1.EncodeHTTPEmptyRespRequest,
//			http1.DecodeHTTPEmptyRespResponse,
//			opts...,
//		).Endpoint(),
//		TestCaseEndpoint: http.NewClient(
//			"POST",
//			u,
//			http1.EncodeHTTPTestCaseRequest,
//			http1.DecodeHTTPTestCaseResponse,
//			opts...,
//		).Endpoint(),
//	}, nil
func (t *httpClientTemplate) clientBody(ctx context.Context) *Statement {
	g := &Statement{}
	g.Return(Qual(t.info.OutputPackageImport+"/transport", EndpointsSetName).Values(DictFunc(
		func(d Dict) {
			for _, fn := range t.info.Iface.Methods {
				if !t.info.AllowedMethods[fn.Name] {
					continue
				}
				method := FetchHttpMethodTag(fn.Docs)
				client := &Statement{}
				client.Qual(PackagePathGoKitTransportHTTP, "NewClient").Call(
					Line().Lit(method), Id("u"),
					Line().Id(encodeRequestName(fn)),
					Line().Id(decodeResponseName(fn)),
					Line().Add(t.clientOpts(fn)).Op("...").Line(),
				).Dot("Endpoint").Call()
				d[Id(endpointsStructFieldName(fn.Name))] = client
			}
		},
	)))
	return g
}

func (t *httpClientTemplate) clientOpts(fn *types.Function) *Statement {
	s := &Statement{}
	s.Id("opts")
	return s
}

//	func createUserSDFactory(clientMaker func(string) transport.EndpointsSet) sd.Factory {
//		return func(instance string) (endpoint.Endpoint, io.Closer, error) {
//			return clientMaker(instance).CreateCommentEndpoint, nil, nil
//		}
//	}
func (t *httpClientTemplate) serviceDiscoveryFactory(ctx context.Context, fn *types.Function) *Statement {
	s := &Statement{}
	const _clientMaker_ = "clientMaker"
	s.Func().Id(serviceDiscoveryFactoryName(fn.Name)).Params(Id(_clientMaker_).Func().Params(String()).Params(Qual(t.info.OutputPackageImport+"/transport", EndpointsSetName), Error())).Params(Qual(PackagePathGoKitSD, "Factory")).Block(
		Return(Func().Params(Id("instance").String()).Params(Qual(PackagePathGoKitEndpoint, "Endpoint"), Qual(PackagePathIO, "Closer"), Error()).Block(
			List(Id("c"), Err()).Op(":=").Id(_clientMaker_).Call(Id("instance")),
			Return(Id("c").Dot(endpointsStructFieldName(fn.Name)), Nil(), Err()),
		)),
	)
	return s
}

func serviceDiscoveryFactoryName(str string) string {
	return strings.ToLowerFirst(str) + "SDFactory"
}

func factoryMakerSignature(info *GenerationInfo) *Statement {
	return Params(
		Id("opts").Op("...").Qual(PackagePathGoKitTransportHTTP, "ClientOption"),
	).Params(
		Func().Params(String()).Params(Qual(info.OutputPackageImport+"/transport", EndpointsSetName), Error()),
	)
}

func sdClientSignature(info *GenerationInfo, names bool) *Statement {
	_instancer_ := "instancer"
	_lg_ := _logger_
	_opts_ := "opts"
	if !names {
		_instancer_, _lg_, _opts_ = "", "", ""
	}
	return Params(
		Id(_instancer_).Qual(PackagePathGoKitSD, "Instancer"),
		Id(_lg_).Qual(PackagePathGoKitLog, "Logger"),
		Id(_opts_).Op("...").Qual(PackagePathGoKitTransportHTTP, "ClientOption"),
	).Params(
		Qual(info.OutputPackageImport+"/transport", EndpointsSetName),
	)
}
