// This file was automatically generated by "microgen 0.6.0" utility.
// Please, do not edit.
package stringsvc

import (
	context "context"
	errors "errors"
	entity "github.com/valerylobachev/microgen/example/svc/entity"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
)

type Endpoints struct {
	UppercaseEndpoint endpoint.Endpoint
	CountEndpoint     endpoint.Endpoint
	TestCaseEndpoint  endpoint.Endpoint
}

func (E *Endpoints) Uppercase(ctx context.Context, str ...map[string]interface{}) (ans string, err error) {
	endpointUppercaseRequest := UppercaseRequest{Str: str}
	endpointUppercaseResponse, err := E.UppercaseEndpoint(ctx, &endpointUppercaseRequest)
	if err != nil {
		if grpc.Code(err) == codes.Internal || grpc.Code(err) == codes.Unknown {
			err = errors.New(grpc.ErrorDesc(err))
		}
		return
	}
	return endpointUppercaseResponse.(*UppercaseResponse).Ans, err
}

func (E *Endpoints) Count(ctx context.Context, text string, symbol string) (count int, positions []int, err error) {
	endpointCountRequest := CountRequest{
		Symbol: symbol,
		Text:   text,
	}
	endpointCountResponse, err := E.CountEndpoint(ctx, &endpointCountRequest)
	if err != nil {
		if grpc.Code(err) == codes.Internal || grpc.Code(err) == codes.Unknown {
			err = errors.New(grpc.ErrorDesc(err))
		}
		return
	}
	return endpointCountResponse.(*CountResponse).Count, endpointCountResponse.(*CountResponse).Positions, err
}

func (E *Endpoints) TestCase(ctx context.Context, comments []*entity.Comment) (tree map[string]int, err error) {
	endpointTestCaseRequest := TestCaseRequest{Comments: comments}
	endpointTestCaseResponse, err := E.TestCaseEndpoint(ctx, &endpointTestCaseRequest)
	if err != nil {
		if grpc.Code(err) == codes.Internal || grpc.Code(err) == codes.Unknown {
			err = errors.New(grpc.ErrorDesc(err))
		}
		return
	}
	return endpointTestCaseResponse.(*TestCaseResponse).Tree, err
}

func UppercaseEndpoint(svc StringService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		_req := request.(*UppercaseRequest)
		ans, err := svc.Uppercase(ctx, _req.Str...)
		return &UppercaseResponse{Ans: ans}, err
	}
}

func CountEndpoint(svc StringService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		_req := request.(*CountRequest)
		count, positions, err := svc.Count(ctx, _req.Text, _req.Symbol)
		return &CountResponse{
			Count:     count,
			Positions: positions,
		}, err
	}
}

func TestCaseEndpoint(svc StringService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		_req := request.(*TestCaseRequest)
		tree, err := svc.TestCase(ctx, _req.Comments)
		return &TestCaseResponse{Tree: tree}, err
	}
}
