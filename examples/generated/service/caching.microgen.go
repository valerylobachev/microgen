// Code generated by microgen 0.9.0. DO NOT EDIT.

package service

import (
	"context"
	service "github.com/valerylobachev/microgen/examples/generated"
	log "github.com/go-kit/kit/log"
)

// Cache interface uses for middleware as key-value storage for requests.
type Cache interface {
	Set(key, value interface{}) (err error)
	Get(key interface{}) (value interface{}, err error)
}

func CachingMiddleware(cache Cache) Middleware {
	return func(next service.StringService) service.StringService {
		return &cachingMiddleware{
			cache: cache,
			next:  next,
		}
	}
}

type cachingMiddleware struct {
	cache  Cache
	logger log.Logger
	next   service.StringService
}

func (M cachingMiddleware) Uppercase(ctx context.Context, stringsMap map[string]string) (res0 string, res1 error) {
	return M.next.Uppercase(ctx, stringsMap)
}

func (M cachingMiddleware) Count(ctx context.Context, text string, symbol string) (res0 int, res1 []int, res2 error) {
	value, e := M.cache.Get(text)
	if e == nil {
		return value.(*countResponseCacheEntity).Count, value.(*countResponseCacheEntity).Positions, res2
	}
	defer func() {
		M.cache.Set(text, &countResponseCacheEntity{
			Count:     res0,
			Positions: res1,
		})
	}()
	return M.next.Count(ctx, text, symbol)
}

func (M cachingMiddleware) TestCase(ctx context.Context, comments []*service.Comment) (res0 map[string]int, res1 error) {
	return M.next.TestCase(ctx, comments)
}

func (M cachingMiddleware) DummyMethod(ctx context.Context) (res0 error) {
	return M.next.DummyMethod(ctx)
}

func (M cachingMiddleware) IgnoredMethod() {
	M.next.IgnoredMethod()
}

func (M cachingMiddleware) IgnoredErrorMethod() (res0 error) {
	return M.next.IgnoredErrorMethod()
}

type uppercaseResponseCacheEntity struct {
	Ans string
}
type countResponseCacheEntity struct {
	Count     int
	Positions []int
}
type testCaseResponseCacheEntity struct {
	Tree map[string]int
}
type dummyMethodResponseCacheEntity struct{}
