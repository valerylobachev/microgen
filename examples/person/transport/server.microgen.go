// Code generated by microgen 0.10.0. DO NOT EDIT.

package transport

import (
	"context"
	endpoint "github.com/go-kit/kit/endpoint"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	opentracinggo "github.com/opentracing/opentracing-go"
	api "github.com/valerylobachev/microgen/examples/person/api"
)

func Endpoints(svc api.PersonService) EndpointsSet {
	return EndpointsSet{
		CreatePersonEndpoint:   CreatePersonEndpoint(svc),
		DeletePersonEndpoint:   DeletePersonEndpoint(svc),
		FindPersonsEndpoint:    FindPersonsEndpoint(svc),
		GetPersonByIdEndpoint:  GetPersonByIdEndpoint(svc),
		GetPersonsByIdEndpoint: GetPersonsByIdEndpoint(svc),
		UpdatePersonEndpoint:   UpdatePersonEndpoint(svc),
	}
}

// TraceServerEndpoints is used for tracing endpoints on server side.
func TraceServerEndpoints(endpoints EndpointsSet, tracer opentracinggo.Tracer) EndpointsSet {
	return EndpointsSet{
		CreatePersonEndpoint:   opentracing.TraceServer(tracer, "CreatePerson")(endpoints.CreatePersonEndpoint),
		DeletePersonEndpoint:   opentracing.TraceServer(tracer, "DeletePerson")(endpoints.DeletePersonEndpoint),
		FindPersonsEndpoint:    opentracing.TraceServer(tracer, "FindPersons")(endpoints.FindPersonsEndpoint),
		GetPersonByIdEndpoint:  opentracing.TraceServer(tracer, "GetPersonById")(endpoints.GetPersonByIdEndpoint),
		GetPersonsByIdEndpoint: opentracing.TraceServer(tracer, "GetPersonsById")(endpoints.GetPersonsByIdEndpoint),
		UpdatePersonEndpoint:   opentracing.TraceServer(tracer, "UpdatePerson")(endpoints.UpdatePersonEndpoint),
	}
}

func CreatePersonEndpoint(svc api.PersonService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreatePersonRequest)
		res0 := svc.CreatePerson(arg0, req.Payload)
		return &CreatePersonResponse{}, res0
	}
}

func UpdatePersonEndpoint(svc api.PersonService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdatePersonRequest)
		res0 := svc.UpdatePerson(arg0, req.Payload)
		return &UpdatePersonResponse{}, res0
	}
}

func DeletePersonEndpoint(svc api.PersonService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeletePersonRequest)
		res0 := svc.DeletePerson(arg0, req.Payload)
		return &DeletePersonResponse{}, res0
	}
}

func GetPersonByIdEndpoint(svc api.PersonService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetPersonByIdRequest)
		res0, res1 := svc.GetPersonById(arg0, req.Id, req.Source)
		return &GetPersonByIdResponse{Res: res0}, res1
	}
}

func GetPersonsByIdEndpoint(svc api.PersonService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetPersonsByIdRequest)
		res0, res1 := svc.GetPersonsById(arg0, req.Ids, req.Source)
		return &GetPersonsByIdResponse{Res: res0}, res1
	}
}

func FindPersonsEndpoint(svc api.PersonService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*FindPersonsRequest)
		res0, res1 := svc.FindPersons(arg0, req.Query)
		return &FindPersonsResponse{Res: res0}, res1
	}
}
