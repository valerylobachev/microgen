// Code generated by microgen 0.10.0. DO NOT EDIT.

package transport

import (
	"context"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	opentracinggo "github.com/opentracing/opentracing-go"
	api "github.com/valerylobachev/microgen/examples/person/api"
)

// TraceClientEndpoints is used for tracing endpoints on client side.
func TraceClientEndpoints(endpoints EndpointsSet, tracer opentracinggo.Tracer) EndpointsSet {
	return EndpointsSet{
		CreatePersonEndpoint:   opentracing.TraceClient(tracer, "CreatePerson")(endpoints.CreatePersonEndpoint),
		DeletePersonEndpoint:   opentracing.TraceClient(tracer, "DeletePerson")(endpoints.DeletePersonEndpoint),
		FindPersonsEndpoint:    opentracing.TraceClient(tracer, "FindPersons")(endpoints.FindPersonsEndpoint),
		GetPersonByIdEndpoint:  opentracing.TraceClient(tracer, "GetPersonById")(endpoints.GetPersonByIdEndpoint),
		GetPersonsByIdEndpoint: opentracing.TraceClient(tracer, "GetPersonsById")(endpoints.GetPersonsByIdEndpoint),
		UpdatePersonEndpoint:   opentracing.TraceClient(tracer, "UpdatePerson")(endpoints.UpdatePersonEndpoint),
	}
}

func (set EndpointsSet) CreatePerson(arg0 context.Context, arg1 api.CreatePersonPayload) (res0 error) {
	request := CreatePersonRequest{Payload: arg1}
	_, res0 = set.CreatePersonEndpoint(arg0, &request)
	if res0 != nil {
		return
	}
	return res0
}

func (set EndpointsSet) UpdatePerson(arg0 context.Context, arg1 api.UpdatePersonPayload) (res0 error) {
	request := UpdatePersonRequest{Payload: arg1}
	_, res0 = set.UpdatePersonEndpoint(arg0, &request)
	if res0 != nil {
		return
	}
	return res0
}

func (set EndpointsSet) DeletePerson(arg0 context.Context, arg1 api.DeletePersonPayload) (res0 error) {
	request := DeletePersonRequest{Payload: arg1}
	_, res0 = set.DeletePersonEndpoint(arg0, &request)
	if res0 != nil {
		return
	}
	return res0
}

func (set EndpointsSet) GetPersonById(arg0 context.Context, arg1 string, arg2 string) (res0 *api.Person, res1 error) {
	request := GetPersonByIdRequest{
		Id:     arg1,
		Source: arg2,
	}
	response, res1 := set.GetPersonByIdEndpoint(arg0, &request)
	if res1 != nil {
		return
	}
	return response.(*GetPersonByIdResponse).Res, res1
}

func (set EndpointsSet) GetPersonsById(arg0 context.Context, arg1 []string, arg2 string) (res0 []api.Person, res1 error) {
	request := GetPersonsByIdRequest{
		Ids:    arg1,
		Source: arg2,
	}
	response, res1 := set.GetPersonsByIdEndpoint(arg0, &request)
	if res1 != nil {
		return
	}
	return response.(*GetPersonsByIdResponse).Res, res1
}

func (set EndpointsSet) FindPersons(arg0 context.Context, arg1 api.FindPersonQuery) (res0 []api.Person, res1 error) {
	request := FindPersonsRequest{Query: arg1}
	response, res1 := set.FindPersonsEndpoint(arg0, &request)
	if res1 != nil {
		return
	}
	return response.(*FindPersonsResponse).Res, res1
}
