// Code generated by microgen 0.10.0. DO NOT EDIT.

package transporthttp

import (
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	mux "github.com/gorilla/mux"
	opentracinggo "github.com/opentracing/opentracing-go"
	transport "github.com/valerylobachev/microgen/examples/person/transport"
	http1 "net/http"
)

func NewHTTPHandler(endpoints *transport.EndpointsSet, logger log.Logger, tracer opentracinggo.Tracer, opts ...http.ServerOption) http1.Handler {
	mux := mux.NewRouter()
	mux.Methods("POST").
		Path("/api/persons/v1/—ÅreatePerson").
		Handler(
			http.NewServer(
				endpoints.CreatePersonEndpoint,
				_Decode_CreatePerson_Request,
				_Encode_CreatePerson_Response,
				append(opts, http.ServerBefore(
					opentracing.HTTPToContext(tracer, "CreatePerson", logger)))...))
	mux.Methods("POST").
		Path("/api/persons/v1/updatePerson").
		Handler(
			http.NewServer(
				endpoints.UpdatePersonEndpoint,
				_Decode_UpdatePerson_Request,
				_Encode_UpdatePerson_Response,
				append(opts, http.ServerBefore(
					opentracing.HTTPToContext(tracer, "UpdatePerson", logger)))...))
	mux.Methods("POST").
		Path("/api/persons/v1/deletePerson").
		Handler(
			http.NewServer(
				endpoints.DeletePersonEndpoint,
				_Decode_DeletePerson_Request,
				_Encode_DeletePerson_Response,
				append(opts, http.ServerBefore(
					opentracing.HTTPToContext(tracer, "DeletePerson", logger)))...))
	mux.Methods("GET").
		Path("/api/persons/v1/getPersonById/{id}").
		Queries("source", "{source}").
		Handler(
			http.NewServer(
				endpoints.GetPersonByIdEndpoint,
				_Decode_GetPersonById_Request,
				_Encode_GetPersonById_Response,
				append(opts, http.ServerBefore(
					opentracing.HTTPToContext(tracer, "GetPersonById", logger)))...))
	mux.Methods("POST").
		Path("/api/persons/v1/getPersonsById").
		Queries("source", "{source}").
		Handler(
			http.NewServer(
				endpoints.GetPersonsByIdEndpoint,
				_Decode_GetPersonsById_Request,
				_Encode_GetPersonsById_Response,
				append(opts, http.ServerBefore(
					opentracing.HTTPToContext(tracer, "GetPersonsById", logger)))...))
	mux.Methods("POST").
		Path("/api/persons/v1/findPersons").
		Handler(
			http.NewServer(
				endpoints.FindPersonsEndpoint,
				_Decode_FindPersons_Request,
				_Encode_FindPersons_Response,
				append(opts, http.ServerBefore(
					opentracing.HTTPToContext(tracer, "FindPersons", logger)))...))
	return mux
}
