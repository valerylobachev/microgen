// Code generated by microgen 0.10.0. DO NOT EDIT.

// Please, do not change functions names!
package transporthttp

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	mux "github.com/gorilla/mux"
	service "github.com/valerylobachev/microgen/examples/person/api"
	transport "github.com/valerylobachev/microgen/examples/person/transport"
	"io/ioutil"
	"net/http"
	"path"
	"strings"
)

func CommonHTTPRequestEncoder(_ context.Context, r *http.Request, request interface{}) error {
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(request); err != nil {
		return err
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

func CommonHTTPResponseEncoder(_ context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	return json.NewEncoder(w).Encode(response)
}

func _Decode_CreatePerson_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var payload service.CreatePersonPayload
	err := json.NewDecoder(r.Body).Decode(&payload)
	if err != nil {
		return nil, err
	}
	return &transport.CreatePersonRequest{Payload: payload}, nil
}

func _Decode_UpdatePerson_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var payload service.UpdatePersonPayload
	err := json.NewDecoder(r.Body).Decode(&payload)
	if err != nil {
		return nil, err
	}
	return &transport.UpdatePersonRequest{Payload: payload}, nil
}

func _Decode_DeletePerson_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var payload service.DeletePersonPayload
	err := json.NewDecoder(r.Body).Decode(&payload)
	if err != nil {
		return nil, err
	}
	return &transport.DeletePersonRequest{Payload: payload}, nil
}

func _Decode_GetPersonById_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var (
		_param string
	)
	var ok bool
	_vars := mux.Vars(r)
	_param, ok = _vars["id"]
	if !ok {
		return nil, errors.New("param id not found")
	}
	id := _param
	_param, ok = _vars["source"]
	if !ok {
		_param = ""
	}
	source := _param
	return &transport.GetPersonByIdRequest{
		Id:     string(id),
		Source: string(source),
	}, nil
}

func _Decode_GetPersonsById_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var (
		_param string
	)
	var ok bool
	_vars := mux.Vars(r)
	_param, ok = _vars["source"]
	if !ok {
		_param = ""
	}
	source := _param
	var ids []string
	err := json.NewDecoder(r.Body).Decode(&ids)
	if err != nil {
		return nil, err
	}
	return &transport.GetPersonsByIdRequest{
		Ids:    ids,
		Source: string(source),
	}, nil
}

func _Decode_FindPersons_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var query service.FindPersonQuery
	err := json.NewDecoder(r.Body).Decode(&query)
	if err != nil {
		return nil, err
	}
	return &transport.FindPersonsRequest{Query: query}, nil
}

func _Decode_CreatePerson_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.CreatePersonResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func _Decode_UpdatePerson_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.UpdatePersonResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func _Decode_DeletePerson_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.DeletePersonResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func _Decode_GetPersonById_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.GetPersonByIdResponse
	err := json.NewDecoder(r.Body).Decode(&resp.Res)
	return &resp, err
}

func _Decode_GetPersonsById_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.GetPersonsByIdResponse
	err := json.NewDecoder(r.Body).Decode(&resp.Res)
	return &resp, err
}

func _Decode_FindPersons_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.FindPersonsResponse
	err := json.NewDecoder(r.Body).Decode(&resp.Res)
	return &resp, err
}

func _Encode_CreatePerson_Request(ctx context.Context, r *http.Request, request interface{}) error {
	req := request.(*transport.CreatePersonRequest)
	p := "/api/persons/v1/—ÅreatePerson"
	r.URL.Path = path.Join(r.URL.Path, p)
	return CommonHTTPRequestEncoder(ctx, r, req.Payload)
}

func _Encode_UpdatePerson_Request(ctx context.Context, r *http.Request, request interface{}) error {
	req := request.(*transport.UpdatePersonRequest)
	p := "/api/persons/v1/updatePerson"
	r.URL.Path = path.Join(r.URL.Path, p)
	return CommonHTTPRequestEncoder(ctx, r, req.Payload)
}

func _Encode_DeletePerson_Request(ctx context.Context, r *http.Request, request interface{}) error {
	req := request.(*transport.DeletePersonRequest)
	p := "/api/persons/v1/deletePerson"
	r.URL.Path = path.Join(r.URL.Path, p)
	return CommonHTTPRequestEncoder(ctx, r, req.Payload)
}

func _Encode_GetPersonById_Request(ctx context.Context, r *http.Request, request interface{}) error {
	req := request.(*transport.GetPersonByIdRequest)
	p := "/api/persons/v1/getPersonById/{id}"
	p = strings.Replace(p, "{id}", req.Id, -1)
	r.URL.Path = path.Join(r.URL.Path, p)
	q := r.URL.Query()
	q.Add("source", req.Source)
	r.URL.RawQuery = q.Encode()
	return CommonHTTPRequestEncoder(ctx, r, &struct{}{})
}

func _Encode_GetPersonsById_Request(ctx context.Context, r *http.Request, request interface{}) error {
	req := request.(*transport.GetPersonsByIdRequest)
	p := "/api/persons/v1/getPersonsById"
	r.URL.Path = path.Join(r.URL.Path, p)
	q := r.URL.Query()
	q.Add("source", req.Source)
	r.URL.RawQuery = q.Encode()
	return CommonHTTPRequestEncoder(ctx, r, req.Ids)
}

func _Encode_FindPersons_Request(ctx context.Context, r *http.Request, request interface{}) error {
	req := request.(*transport.FindPersonsRequest)
	p := "/api/persons/v1/findPersons"
	r.URL.Path = path.Join(r.URL.Path, p)
	return CommonHTTPRequestEncoder(ctx, r, req.Query)
}

func _Encode_CreatePerson_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	return CommonHTTPResponseEncoder(ctx, w, response)
}

func _Encode_UpdatePerson_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	return CommonHTTPResponseEncoder(ctx, w, response)
}

func _Encode_DeletePerson_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	return CommonHTTPResponseEncoder(ctx, w, response)
}

func _Encode_GetPersonById_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	res := response.(*transport.GetPersonByIdResponse)
	return CommonHTTPResponseEncoder(ctx, w, res.Res)
}

func _Encode_GetPersonsById_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	res := response.(*transport.GetPersonsByIdResponse)
	return CommonHTTPResponseEncoder(ctx, w, res.Res)
}

func _Encode_FindPersons_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	res := response.(*transport.FindPersonsResponse)
	return CommonHTTPResponseEncoder(ctx, w, res.Res)
}
