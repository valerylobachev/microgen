// Code generated by microgen 0.10.0. DO NOT EDIT.

package service

import (
	"context"
	log "github.com/go-kit/kit/log"
	service "github.com/valerylobachev/microgen/examples/person/api"
)

// Cache interface uses for middleware as key-value storage for requests.
type Cache interface {
	Set(key, value interface{}) (err error)
	Get(key interface{}) (value interface{}, err error)
}

func CachingMiddleware(cache Cache) Middleware {
	return func(next service.PersonService) service.PersonService {
		return &cachingMiddleware{
			cache: cache,
			next:  next,
		}
	}
}

type cachingMiddleware struct {
	cache  Cache
	logger log.Logger
	next   service.PersonService
}

func (M cachingMiddleware) CreatePerson(ctx context.Context, payload service.CreatePersonPayload) (res0 error) {
	return M.next.CreatePerson(ctx, payload)
}

func (M cachingMiddleware) UpdatePerson(ctx context.Context, payload service.UpdatePersonPayload) (res0 error) {
	return M.next.UpdatePerson(ctx, payload)
}

func (M cachingMiddleware) DeletePerson(ctx context.Context, payload service.DeletePersonPayload) (res0 error) {
	return M.next.DeletePerson(ctx, payload)
}

func (M cachingMiddleware) GetPersonById(ctx context.Context, id string, source string) (res0 *service.Person, res1 error) {
	return M.next.GetPersonById(ctx, id, source)
}

func (M cachingMiddleware) GetPersonsById(ctx context.Context, ids []string, source string) (res0 []service.Person, res1 error) {
	return M.next.GetPersonsById(ctx, ids, source)
}

func (M cachingMiddleware) FindPersons(ctx context.Context, query service.FindPersonQuery) (res0 []service.Person, res1 error) {
	return M.next.FindPersons(ctx, query)
}

type createPersonResponseCacheEntity struct{}
type updatePersonResponseCacheEntity struct{}
type deletePersonResponseCacheEntity struct{}
type getPersonByIdResponseCacheEntity struct {
	Res *service.Person
}
type getPersonsByIdResponseCacheEntity struct {
	Res []service.Person
}
type findPersonsResponseCacheEntity struct {
	Res []service.Person
}
