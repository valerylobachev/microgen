// Code generated by microgen 0.10.0. DO NOT EDIT.

package service

import (
	"context"
	log "github.com/go-kit/kit/log"
	service "github.com/valerylobachev/microgen/examples/person/api"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.PersonService) service.PersonService {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.PersonService
}

func (M loggingMiddleware) CreatePerson(arg0 context.Context, arg1 service.CreatePersonPayload) (res0 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "CreatePerson",
			"request", logCreatePersonRequest{Payload: arg1},
			"err", res0,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.CreatePerson(arg0, arg1)
}

func (M loggingMiddleware) UpdatePerson(arg0 context.Context, arg1 service.UpdatePersonPayload) (res0 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "UpdatePerson",
			"request", logUpdatePersonRequest{Payload: arg1},
			"err", res0,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.UpdatePerson(arg0, arg1)
}

func (M loggingMiddleware) DeletePerson(arg0 context.Context, arg1 service.DeletePersonPayload) (res0 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "DeletePerson",
			"request", logDeletePersonRequest{Payload: arg1},
			"err", res0,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.DeletePerson(arg0, arg1)
}

func (M loggingMiddleware) GetPersonById(arg0 context.Context, arg1 string, arg2 string) (res0 *service.Person, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetPersonById",
			"request", logGetPersonByIdRequest{
				Id:     arg1,
				Source: arg2,
			},
			"response", logGetPersonByIdResponse{Res: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetPersonById(arg0, arg1, arg2)
}

func (M loggingMiddleware) GetPersonsById(arg0 context.Context, arg1 []string, arg2 string) (res0 []service.Person, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetPersonsById",
			"request", logGetPersonsByIdRequest{
				Ids:    arg1,
				Source: arg2,
			},
			"response", logGetPersonsByIdResponse{Res: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetPersonsById(arg0, arg1, arg2)
}

func (M loggingMiddleware) FindPersons(arg0 context.Context, arg1 service.FindPersonQuery) (res0 []service.Person, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "FindPersons",
			"request", logFindPersonsRequest{Query: arg1},
			"response", logFindPersonsResponse{Res: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.FindPersons(arg0, arg1)
}

type (
	logCreatePersonRequest struct {
		Payload service.CreatePersonPayload
	}
	logUpdatePersonRequest struct {
		Payload service.UpdatePersonPayload
	}
	logDeletePersonRequest struct {
		Payload service.DeletePersonPayload
	}
	logGetPersonByIdRequest struct {
		Id     string
		Source string
	}
	logGetPersonByIdResponse struct {
		Res *service.Person
	}
	logGetPersonsByIdRequest struct {
		Ids    []string
		Source string
	}
	logGetPersonsByIdResponse struct {
		Res []service.Person
	}
	logFindPersonsRequest struct {
		Query service.FindPersonQuery
	}
	logFindPersonsResponse struct {
		Res []service.Person
	}
)
