// Code generated by microgen 1.0.0-beta. DO NOT EDIT.

// Please, do not change functions names!
package transportgrpc

import (
	"context"
	"errors"
	pb "github.com/valerylobachev/microgen/examples/protobuf"
	transport "github.com/valerylobachev/microgen/examples/usersvc/pkg/transport"
	empty "github.com/golang/protobuf/ptypes/empty"
)

func _Encode_CreateUser_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil CreateUserRequest")
	}
	req := request.(*transport.CreateUserRequest)
	reqUser, err := UserToProto(req.User)
	if err != nil {
		return nil, err
	}
	return &pb.CreateUserRequest{User: reqUser}, nil
}

func _Encode_UpdateUser_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil UpdateUserRequest")
	}
	req := request.(*transport.UpdateUserRequest)
	reqUser, err := UserToProto(req.User)
	if err != nil {
		return nil, err
	}
	return &pb.UpdateUserRequest{User: reqUser}, nil
}

func _Encode_GetUser_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetUserRequest")
	}
	req := request.(*transport.GetUserRequest)
	return &pb.GetUserRequest{Id: req.Id}, nil
}

func _Encode_FindUsers_Request(ctx context.Context, request interface{}) (interface{}, error) {
	return &empty.Empty{}, nil
}

func _Encode_CreateComment_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil CreateCommentRequest")
	}
	req := request.(*transport.CreateCommentRequest)
	reqComment, err := CommentToProto(req.Comment)
	if err != nil {
		return nil, err
	}
	return &pb.CreateCommentRequest{Comment: reqComment}, nil
}

func _Encode_GetComment_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetCommentRequest")
	}
	req := request.(*transport.GetCommentRequest)
	return &pb.GetCommentRequest{Id: req.Id}, nil
}

func _Encode_GetUserComments_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetUserCommentsRequest")
	}
	req := request.(*transport.GetUserCommentsRequest)
	return &pb.GetUserCommentsRequest{UserId: req.UserId}, nil
}

func _Encode_CreateUser_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil CreateUserResponse")
	}
	resp := response.(*transport.CreateUserResponse)
	return &pb.CreateUserResponse{Id: resp.Id}, nil
}

func _Encode_UpdateUser_Response(ctx context.Context, response interface{}) (interface{}, error) {
	return &empty.Empty{}, nil
}

func _Encode_GetUser_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetUserResponse")
	}
	resp := response.(*transport.GetUserResponse)
	respUser, err := UserToProto(resp.User)
	if err != nil {
		return nil, err
	}
	return &pb.GetUserResponse{User: respUser}, nil
}

func _Encode_FindUsers_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil FindUsersResponse")
	}
	resp := response.(*transport.FindUsersResponse)
	respResults, err := MapStringUserToProto(resp.Results)
	if err != nil {
		return nil, err
	}
	return &pb.FindUsersResponse{Results: respResults}, nil
}

func _Encode_CreateComment_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil CreateCommentResponse")
	}
	resp := response.(*transport.CreateCommentResponse)
	return &pb.CreateCommentResponse{Id: resp.Id}, nil
}

func _Encode_GetComment_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetCommentResponse")
	}
	resp := response.(*transport.GetCommentResponse)
	respComment, err := CommentToProto(resp.Comment)
	if err != nil {
		return nil, err
	}
	return &pb.GetCommentResponse{Comment: respComment}, nil
}

func _Encode_GetUserComments_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetUserCommentsResponse")
	}
	resp := response.(*transport.GetUserCommentsResponse)
	respList, err := ListCommentToProto(resp.List)
	if err != nil {
		return nil, err
	}
	return &pb.GetUserCommentsResponse{List: respList}, nil
}

func _Decode_CreateUser_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil CreateUserRequest")
	}
	req := request.(*pb.CreateUserRequest)
	reqUser, err := ProtoToUser(req.User)
	if err != nil {
		return nil, err
	}
	return &transport.CreateUserRequest{User: reqUser}, nil
}

func _Decode_UpdateUser_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil UpdateUserRequest")
	}
	req := request.(*pb.UpdateUserRequest)
	reqUser, err := ProtoToUser(req.User)
	if err != nil {
		return nil, err
	}
	return &transport.UpdateUserRequest{User: reqUser}, nil
}

func _Decode_GetUser_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetUserRequest")
	}
	req := request.(*pb.GetUserRequest)
	return &transport.GetUserRequest{Id: string(req.Id)}, nil
}

func _Decode_FindUsers_Request(ctx context.Context, request interface{}) (interface{}, error) {
	return &empty.Empty{}, nil
}

func _Decode_CreateComment_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil CreateCommentRequest")
	}
	req := request.(*pb.CreateCommentRequest)
	reqComment, err := ProtoToComment(req.Comment)
	if err != nil {
		return nil, err
	}
	return &transport.CreateCommentRequest{Comment: reqComment}, nil
}

func _Decode_GetComment_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetCommentRequest")
	}
	req := request.(*pb.GetCommentRequest)
	return &transport.GetCommentRequest{Id: string(req.Id)}, nil
}

func _Decode_GetUserComments_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetUserCommentsRequest")
	}
	req := request.(*pb.GetUserCommentsRequest)
	return &transport.GetUserCommentsRequest{UserId: string(req.UserId)}, nil
}

func _Decode_CreateUser_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil CreateUserResponse")
	}
	resp := response.(*pb.CreateUserResponse)
	return &transport.CreateUserResponse{Id: string(resp.Id)}, nil
}

func _Decode_UpdateUser_Response(ctx context.Context, response interface{}) (interface{}, error) {
	return &empty.Empty{}, nil
}

func _Decode_GetUser_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetUserResponse")
	}
	resp := response.(*pb.GetUserResponse)
	respUser, err := ProtoToUser(resp.User)
	if err != nil {
		return nil, err
	}
	return &transport.GetUserResponse{User: respUser}, nil
}

func _Decode_FindUsers_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil FindUsersResponse")
	}
	resp := response.(*pb.FindUsersResponse)
	respResults, err := ProtoToMapStringUser(resp.Results)
	if err != nil {
		return nil, err
	}
	return &transport.FindUsersResponse{Results: respResults}, nil
}

func _Decode_CreateComment_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil CreateCommentResponse")
	}
	resp := response.(*pb.CreateCommentResponse)
	return &transport.CreateCommentResponse{Id: string(resp.Id)}, nil
}

func _Decode_GetComment_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetCommentResponse")
	}
	resp := response.(*pb.GetCommentResponse)
	respComment, err := ProtoToComment(resp.Comment)
	if err != nil {
		return nil, err
	}
	return &transport.GetCommentResponse{Comment: respComment}, nil
}

func _Decode_GetUserComments_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetUserCommentsResponse")
	}
	resp := response.(*pb.GetUserCommentsResponse)
	respList, err := ProtoToListComment(resp.List)
	if err != nil {
		return nil, err
	}
	return &transport.GetUserCommentsResponse{List: respList}, nil
}
