// Code generated by microgen 0.10.0. DO NOT EDIT.

package transport

import (
	"context"
	endpoint "github.com/go-kit/kit/endpoint"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	opentracinggo "github.com/opentracing/opentracing-go"
	usersvc "github.com/valerylobachev/microgen/examples/usersvc/pkg/usersvc"
)

func Endpoints(svc usersvc.UserService) EndpointsSet {
	return EndpointsSet{
		CreateCommentEndpoint:   CreateCommentEndpoint(svc),
		CreateUserEndpoint:      CreateUserEndpoint(svc),
		FindUsersEndpoint:       FindUsersEndpoint(svc),
		GetCommentEndpoint:      GetCommentEndpoint(svc),
		GetUserCommentsEndpoint: GetUserCommentsEndpoint(svc),
		GetUserEndpoint:         GetUserEndpoint(svc),
		UpdateUserEndpoint:      UpdateUserEndpoint(svc),
	}
}

// TraceServerEndpoints is used for tracing endpoints on server side.
func TraceServerEndpoints(endpoints EndpointsSet, tracer opentracinggo.Tracer) EndpointsSet {
	return EndpointsSet{
		CreateCommentEndpoint:   opentracing.TraceServer(tracer, "CreateComment")(endpoints.CreateCommentEndpoint),
		CreateUserEndpoint:      opentracing.TraceServer(tracer, "CreateUser")(endpoints.CreateUserEndpoint),
		FindUsersEndpoint:       opentracing.TraceServer(tracer, "FindUsers")(endpoints.FindUsersEndpoint),
		GetCommentEndpoint:      opentracing.TraceServer(tracer, "GetComment")(endpoints.GetCommentEndpoint),
		GetUserCommentsEndpoint: opentracing.TraceServer(tracer, "GetUserComments")(endpoints.GetUserCommentsEndpoint),
		GetUserEndpoint:         opentracing.TraceServer(tracer, "GetUser")(endpoints.GetUserEndpoint),
		UpdateUserEndpoint:      opentracing.TraceServer(tracer, "UpdateUser")(endpoints.UpdateUserEndpoint),
	}
}

func CreateUserEndpoint(svc usersvc.UserService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateUserRequest)
		res0, res1 := svc.CreateUser(arg0, req.User)
		return &CreateUserResponse{Id: res0}, res1
	}
}

func UpdateUserEndpoint(svc usersvc.UserService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateUserRequest)
		res0 := svc.UpdateUser(arg0, req.User)
		return &UpdateUserResponse{}, res0
	}
}

func GetUserEndpoint(svc usersvc.UserService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetUserRequest)
		res0, res1 := svc.GetUser(arg0, req.Id)
		return &GetUserResponse{User: res0}, res1
	}
}

func FindUsersEndpoint(svc usersvc.UserService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		res0, res1 := svc.FindUsers(arg0)
		return &FindUsersResponse{Results: res0}, res1
	}
}

func CreateCommentEndpoint(svc usersvc.UserService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateCommentRequest)
		res0, res1 := svc.CreateComment(arg0, req.Comment)
		return &CreateCommentResponse{Id: res0}, res1
	}
}

func GetCommentEndpoint(svc usersvc.UserService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetCommentRequest)
		res0, res1 := svc.GetComment(arg0, req.Id)
		return &GetCommentResponse{Comment: res0}, res1
	}
}

func GetUserCommentsEndpoint(svc usersvc.UserService) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetUserCommentsRequest)
		res0, res1 := svc.GetUserComments(arg0, req.UserId)
		return &GetUserCommentsResponse{List: res0}, res1
	}
}
