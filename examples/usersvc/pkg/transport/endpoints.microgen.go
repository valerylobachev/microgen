// Code generated by microgen 0.10.0. DO NOT EDIT.

package transport

import (
	"context"
	"fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	metrics "github.com/go-kit/kit/metrics"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	opentracinggo "github.com/opentracing/opentracing-go"
	"time"
)

// EndpointsSet implements UserService API and used for transport purposes.
type EndpointsSet struct {
	CreateUserEndpoint      endpoint.Endpoint
	UpdateUserEndpoint      endpoint.Endpoint
	GetUserEndpoint         endpoint.Endpoint
	FindUsersEndpoint       endpoint.Endpoint
	CreateCommentEndpoint   endpoint.Endpoint
	GetCommentEndpoint      endpoint.Endpoint
	GetUserCommentsEndpoint endpoint.Endpoint
}

func InstrumentingEndpoints(endpoints EndpointsSet, tracer opentracinggo.Tracer) EndpointsSet {
	return EndpointsSet{
		CreateCommentEndpoint:   opentracing.TraceServer(tracer, "CreateComment")(endpoints.CreateCommentEndpoint),
		CreateUserEndpoint:      opentracing.TraceServer(tracer, "CreateUser")(endpoints.CreateUserEndpoint),
		FindUsersEndpoint:       opentracing.TraceServer(tracer, "FindUsers")(endpoints.FindUsersEndpoint),
		GetCommentEndpoint:      opentracing.TraceServer(tracer, "GetComment")(endpoints.GetCommentEndpoint),
		GetUserCommentsEndpoint: opentracing.TraceServer(tracer, "GetUserComments")(endpoints.GetUserCommentsEndpoint),
		GetUserEndpoint:         opentracing.TraceServer(tracer, "GetUser")(endpoints.GetUserEndpoint),
		UpdateUserEndpoint:      opentracing.TraceServer(tracer, "UpdateUser")(endpoints.UpdateUserEndpoint),
	}
}

func LatencyMiddleware(dur metrics.Histogram, methodName string) endpoint.Middleware {
	return func(next endpoint.Endpoint) endpoint.Endpoint {
		dur := dur.With("method", methodName)
		return func(ctx context.Context, request interface{}) (response interface{}, err error) {
			defer func(begin time.Time) {
				dur.With("success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
			}(time.Now())
			return next(ctx, request)
		}
	}
}

func RequestFrequencyMiddleware(freq metrics.Gauge, methodName string) endpoint.Middleware {
	return func(next endpoint.Endpoint) endpoint.Endpoint {
		freq := freq.With("method", methodName)
		return func(ctx context.Context, request interface{}) (interface{}, error) {
			freq.Add(1)
			response, err := next(ctx, request)
			freq.Add(-1)
			return response, err
		}
	}
}
