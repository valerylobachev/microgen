// Code generated by microgen 0.10.0. DO NOT EDIT.

package service

import (
	"context"
	log "github.com/go-kit/kit/log"
	service "github.com/valerylobachev/microgen/examples/usersvc/pkg/usersvc"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.UserService) service.UserService {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.UserService
}

func (M loggingMiddleware) CreateUser(arg0 context.Context, arg1 service.User) (res0 string, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "CreateUser",
			"request", logCreateUserRequest{User: arg1},
			"response", logCreateUserResponse{Id: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.CreateUser(arg0, arg1)
}

func (M loggingMiddleware) UpdateUser(arg0 context.Context, arg1 service.User) (res0 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "UpdateUser",
			"request", logUpdateUserRequest{User: arg1},
			"err", res0,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.UpdateUser(arg0, arg1)
}

func (M loggingMiddleware) GetUser(arg0 context.Context, arg1 string) (res0 service.User, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetUser",
			"request", logGetUserRequest{Id: arg1},
			"response", logGetUserResponse{User: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetUser(arg0, arg1)
}

func (M loggingMiddleware) FindUsers(arg0 context.Context) (res0 map[string]service.User, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "FindUsers",
			"response", logFindUsersResponse{Results: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.FindUsers(arg0)
}

func (M loggingMiddleware) CreateComment(arg0 context.Context, arg1 service.Comment) (res0 string, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "CreateComment",
			"request", logCreateCommentRequest{Comment: arg1},
			"response", logCreateCommentResponse{Id: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.CreateComment(arg0, arg1)
}

func (M loggingMiddleware) GetComment(arg0 context.Context, arg1 string) (res0 service.Comment, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetComment",
			"request", logGetCommentRequest{Id: arg1},
			"response", logGetCommentResponse{Comment: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetComment(arg0, arg1)
}

func (M loggingMiddleware) GetUserComments(arg0 context.Context, arg1 string) (res0 []service.Comment, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetUserComments",
			"request", logGetUserCommentsRequest{UserId: arg1},
			"response", logGetUserCommentsResponse{List: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetUserComments(arg0, arg1)
}

type (
	logCreateUserRequest struct {
		User service.User
	}
	logCreateUserResponse struct {
		Id string
	}
	logUpdateUserRequest struct {
		User service.User
	}
	logGetUserRequest struct {
		Id string
	}
	logGetUserResponse struct {
		User service.User
	}
	logFindUsersResponse struct {
		Results map[string]service.User
	}
	logCreateCommentRequest struct {
		Comment service.Comment
	}
	logCreateCommentResponse struct {
		Id string
	}
	logGetCommentRequest struct {
		Id string
	}
	logGetCommentResponse struct {
		Comment service.Comment
	}
	logGetUserCommentsRequest struct {
		UserId string
	}
	logGetUserCommentsResponse struct {
		List []service.Comment
	}
)
