// Code generated by microgen 0.10.0. DO NOT EDIT.

// Please, do not change functions names!
package transportgrpc

import (
	"context"
	"errors"
	transport "github.com/valerylobachev/microgen/examples/addsvc/transport"
	pb "github.com/valerylobachev/microgen/examples/protobuf"
)

func _Encode_Sum_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil SumRequest")
	}
	req := request.(*transport.SumRequest)
	return &pb.SumRequest{
		A: int64(req.A),
		B: int64(req.B),
	}, nil
}

func _Encode_Concat_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil ConcatRequest")
	}
	req := request.(*transport.ConcatRequest)
	return &pb.ConcatRequest{
		A: req.A,
		B: req.B,
	}, nil
}

func _Encode_Sum_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil SumResponse")
	}
	resp := response.(*transport.SumResponse)
	return &pb.SumResponse{Result: int64(resp.Result)}, nil
}

func _Encode_Concat_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil ConcatResponse")
	}
	resp := response.(*transport.ConcatResponse)
	return &pb.ConcatResponse{Result: resp.Result}, nil
}

func _Decode_Sum_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil SumRequest")
	}
	req := request.(*pb.SumRequest)
	return &transport.SumRequest{
		A: int(req.A),
		B: int(req.B),
	}, nil
}

func _Decode_Concat_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil ConcatRequest")
	}
	req := request.(*pb.ConcatRequest)
	return &transport.ConcatRequest{
		A: string(req.A),
		B: string(req.B),
	}, nil
}

func _Decode_Sum_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil SumResponse")
	}
	resp := response.(*pb.SumResponse)
	return &transport.SumResponse{Result: int(resp.Result)}, nil
}

func _Decode_Concat_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil ConcatResponse")
	}
	resp := response.(*pb.ConcatResponse)
	return &transport.ConcatResponse{Result: string(resp.Result)}, nil
}
