// Code generated by microgen 0.10.0. DO NOT EDIT.

// DO NOT EDIT.
package transportgrpc

import (
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	grpc "github.com/go-kit/kit/transport/grpc"
	opentracinggo "github.com/opentracing/opentracing-go"
	transport "github.com/valerylobachev/microgen/examples/addsvc/transport"
	pb "github.com/valerylobachev/microgen/examples/protobuf"
	context "golang.org/x/net/context"
)

type serviceServer struct {
	sum    grpc.Handler
	concat grpc.Handler
}

func NewGRPCServer(endpoints *transport.EndpointsSet, logger log.Logger, tracer opentracinggo.Tracer, opts ...grpc.ServerOption) pb.ServiceServer {
	return &serviceServer{
		concat: grpc.NewServer(
			endpoints.ConcatEndpoint,
			_Decode_Concat_Request,
			_Encode_Concat_Response,
			append(opts, grpc.ServerBefore(
				opentracing.GRPCToContext(tracer, "Concat", logger)))...,
		),
		sum: grpc.NewServer(
			endpoints.SumEndpoint,
			_Decode_Sum_Request,
			_Encode_Sum_Response,
			append(opts, grpc.ServerBefore(
				opentracing.GRPCToContext(tracer, "Sum", logger)))...,
		),
	}
}

func (S *serviceServer) Sum(ctx context.Context, req *pb.SumRequest) (*pb.SumResponse, error) {
	_, resp, err := S.sum.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.SumResponse), nil
}

func (S *serviceServer) Concat(ctx context.Context, req *pb.ConcatRequest) (*pb.ConcatResponse, error) {
	_, resp, err := S.concat.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.ConcatResponse), nil
}
