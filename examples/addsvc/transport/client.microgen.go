// Code generated by microgen 0.10.0. DO NOT EDIT.

package transport

import (
	"context"
	"errors"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	opentracinggo "github.com/opentracing/opentracing-go"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// TraceClientEndpoints is used for tracing endpoints on client side.
func TraceClientEndpoints(endpoints EndpointsSet, tracer opentracinggo.Tracer) EndpointsSet {
	return EndpointsSet{
		ConcatEndpoint: opentracing.TraceClient(tracer, "Concat")(endpoints.ConcatEndpoint),
		SumEndpoint:    opentracing.TraceClient(tracer, "Sum")(endpoints.SumEndpoint),
	}
}

func (set EndpointsSet) Sum(arg0 context.Context, arg1 int, arg2 int) (res0 int, res1 error) {
	request := SumRequest{
		A: arg1,
		B: arg2,
	}
	response, res1 := set.SumEndpoint(arg0, &request)
	if res1 != nil {
		if e, ok := status.FromError(res1); ok || e.Code() == codes.Internal || e.Code() == codes.Unknown {
			res1 = errors.New(e.Message())
		}
		return
	}
	return response.(*SumResponse).Result, res1
}

func (set EndpointsSet) Concat(arg0 context.Context, arg1 string, arg2 string) (res0 string, res1 error) {
	request := ConcatRequest{
		A: arg1,
		B: arg2,
	}
	response, res1 := set.ConcatEndpoint(arg0, &request)
	if res1 != nil {
		if e, ok := status.FromError(res1); ok || e.Code() == codes.Internal || e.Code() == codes.Unknown {
			res1 = errors.New(e.Message())
		}
		return
	}
	return response.(*ConcatResponse).Result, res1
}
