// Code generated by microgen 0.10.0. DO NOT EDIT.

package service

import (
	"context"
	log "github.com/go-kit/kit/log"
	service "github.com/valerylobachev/microgen/examples/addsvc/addsvc"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M loggingMiddleware) Sum(arg0 context.Context, arg1 int, arg2 int) (res0 int, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "Sum",
			"request", logSumRequest{
				A: arg1,
				B: arg2,
			},
			"response", logSumResponse{Result: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.Sum(arg0, arg1, arg2)
}

func (M loggingMiddleware) Concat(arg0 context.Context, arg1 string, arg2 string) (res0 string, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "Concat",
			"request", logConcatRequest{
				A: arg1,
				B: arg2,
			},
			"response", logConcatResponse{Result: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.Concat(arg0, arg1, arg2)
}

type (
	logSumRequest struct {
		A int
		B int
	}
	logSumResponse struct {
		Result int
	}
	logConcatRequest struct {
		A string
		B string
	}
	logConcatResponse struct {
		Result string
	}
)
